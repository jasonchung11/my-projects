package submit;

import java.util.HashSet;
import java.util.List;

import graph.Edge;
import graph.FindState;
import graph.Finder;
import graph.FleeState;
import graph.Node;
import graph.NodeStatus;

/** A solution with find-the-Orb optimized and flee getting out as fast as possible. */
public class Pollack extends Finder {

    private long startTime= 0; // start time in milliseconds

    /** Return the time from start time till when this method is called, in milliseconds */
    public long elapsedTime() {
        return System.currentTimeMillis() - startTime;
    }

    /** Get to the orb in as few steps as possible. <br>
     * Once you get there, you must return from the function in order to pick it up. <br>
     * If you continue to move after finding the orb rather than returning, it will not count.<br>
     * If you return from this function while not standing on top of the orb, it will count as <br>
     * a failure.
     *
     * There is no limit to how many steps you can take, but you will receive<br>
     * a score bonus multiplier for finding the orb in fewer steps.
     *
     * At every step, you know only your current tile's ID and the ID of all<br>
     * open neighbor tiles, as well as the distance to the orb at each of <br>
     * these tiles (ignoring walls and obstacles).
     *
     * In order to get information about the current state, use functions<br>
     * currentLoc(), neighbors(), and distanceToOrb() in FindState.<br>
     * You know you are standing on the orb when distanceToOrb() is 0.
     *
     * Use function moveTo(long id) in FindState to move to a neighboring<br>
     * tile by its ID. Doing this will change state to reflect your new position.
     *
     * A suggested first implementation that will always find the orb, but <br>
     * likely won't receive a large bonus multiplier, is a depth-first search. <br>
     * Some modification is necessary to make the search better, in general. */
    @Override
    public void find(FindState state) {
        // TODO 1: Walk to the orb

        HashSet<Long> visitedHS= new HashSet<>();
        dfsWalk(state, visitedHS);

        // FindState:
        // state.currentLoc() - unique identifier (long) for the current tile on
        // state.distanceToOrb() - distance from location to orb (int)
        // state.neighbors() - Collection<NodeStatus> of neighboring tiles
        // NodeStatus contains ID corresponding to each neighbor, and neighbor's
        // distance to Orb
        // state.moveTo(long id) - move to tile with ID id, fails if not a neighbor

    }

    public int dfsWalk(FindState s, HashSet<Long> visitedHS) {
        Heap<NodeStatus> neighborsHeap= new Heap<>(true);

        if (s.distanceToOrb() == 0) return 1;
        long prev= s.currentLoc();
        visitedHS.add(prev);

        // Add all neighbors to the min-heap
        for (NodeStatus n : s.neighbors()) {
            if (!visitedHS.contains(n.getId())) {
                neighborsHeap.insert(n, n.getDistanceToTarget());
            }
        }

        while (neighborsHeap.size() != 0) {
            s.moveTo(neighborsHeap.poll().getId());
            if (dfsWalk(s, visitedHS) == 1) return 1;
            s.moveTo(prev);
        }
        return 0;
    }

    /** Get out the cavern before the ceiling collapses, trying to collect as <br>
     * much gold as possible along the way. Your solution must ALWAYS get out <br>
     * before steps runs out, and this should be prioritized above collecting gold.
     *
     * You now have access to the entire underlying graph, which can be accessed <br>
     * through FleeState state. <br>
     * currentNode() and exit() will return Node objects of interest, and <br>
     * allsNodes() will return a collection of all nodes on the graph.
     *
     * Note that the cavern will collapse in the number of steps given by <br>
     * stepsLeft(), and for each step this number is decremented by the <br>
     * weight of the edge taken. <br>
     * Use stepsLeft() to get the steps still remaining, and <br>
     * moveTo() to move to a destination node adjacent to your current node.
     *
     * You must return from this function while standing at the exit. <br>
     * Failing to do so before steps runs out or returning from the wrong <br>
     * location will be considered a failed run.
     *
     * You will always have enough steps to flee using the shortest path from the <br>
     * starting position to the exit, although this will not collect much gold. <br>
     * For this reason, using Dijkstra's to plot the shortest path to the exit <br>
     * is a good starting solution
     *
     * Here's another hint. Whatever you do you will need to traverse a given path. It makes sense
     * to write a method to do this, perhaps with this specification:
     *
     * // Traverse the nodes in moveOut sequentially, starting at the node<br>
     * // pertaining to state <br>
     * // public void moveAlong(FleeState state, List<Node> moveOut) */
    @Override
    public void flee(FleeState state) {
        // TODO 2. Get out of the cavern in time, picking up as much gold as possible.

        startTime= System.currentTimeMillis();

        HashSet<Node> visitedHS= new HashSet<>();

        dfsGoldNEW(state, visitedHS);
        int pSum= Path.pathSum(Path.shortestPath(state.currentNode(), state.exit()));

        System.out.println("exiting with steps= " + state.stepsLeft());
        System.out.println("and path steps= " + pSum);

        toExit(state);

        // try and call toExit(state) here, and make dfsGold return an int
        // the instance the char has to leave to make it on time

        // toExit(state);

        System.out.println("Elapsed time: " + elapsedTime() / 1000.00 + " seconds");
    }

    public int dfsGoldNEW(FleeState s, HashSet<Node> visitedHS) {
        int pSum= Path.pathSum(Path.shortestPath(s.currentNode(), s.exit()));

        if (s.currentNode().equals(s.exit())) return 1;

        // create a max-heap, with priority value of gold on tile, of neighboring tiles
        Heap<Node> neighborsHeap= new Heap<>(false);
        Node prevNode= s.currentNode();
        visitedHS.add(prevNode);

        // add all neighbors to max-heap, with priority gold
        for (Node n : prevNode.getNeighbors()) {
            // System.out.println("added a neighbor");
            if (!visitedHS.contains(n)) {
                neighborsHeap.insert(n, n.getTile().gold());
            }
        }

        while (neighborsHeap.size() != 0) {
            Node goTo= neighborsHeap.poll();
            Edge nextMove= s.currentNode().edge(goTo);
            int edgeLength= nextMove.length();

            if (s.stepsLeft() <= pSum + edgeLength + 1) return 1;

            s.moveTo(goTo);
            if (s.stepsLeft() <= pSum + edgeLength + 1) return 1;

            if (dfsGoldNEW(s, visitedHS) == 1) return 1;
            if (s.stepsLeft() <= pSum + edgeLength + 1) return 1;

            s.moveTo(prevNode);
            if (s.stepsLeft() <= pSum + edgeLength + 1) return 1;

        }

        return 0;

    }

    // -------------------------------------------------------------------

    public int dfsGold(FleeState s, HashSet<Node> visitedHS) {
        int pSum= Path.pathSum(Path.shortestPath(s.currentNode(), s.exit()));
//        pSum += s.exit()

        System.out.println("checking if we need to leave");
        System.out.println("steps left= " + s.stepsLeft());
        System.out.println("pSum= " + pSum);
        if (s.stepsLeft() <= pSum + 50) {
            System.out.println("exiting now");

            toExit(s);
        }

        if (s.currentNode().equals(s.exit())) return 1;

        // create a max-heap, with priority value of gold on tile, of neighboring tiles
        Heap<Node> neighborsHeap= new Heap<>(false);
        Node prevNode= s.currentNode();
        visitedHS.add(prevNode);

        // add all neighbors to max-heap, with priority gold
        for (Node n : prevNode.getNeighbors()) {
            // System.out.println("added a neighbor");
            if (!visitedHS.contains(n)) {
                neighborsHeap.insert(n, n.getTile().gold());
            }
        }

        while (neighborsHeap.size() != 0) {
            Node goTo= neighborsHeap.poll();
            Edge nextMove= s.currentNode().edge(goTo);
            int edgeLength= nextMove.length();
            if (s.stepsLeft() <= pSum + edgeLength + 1) {
                // int pSumNextMode= Path.pathSum(Path.shortestPath(goTo, s.exit()));
                // if (s.stepsLeft() <= pSumNextMode) {
                System.out.println("exiting now1");
                toExit(s);
            } else {
                s.moveTo(goTo);

                if (dfsGold(s, visitedHS) == 1) return 1;

                s.moveTo(prevNode);
            }

        }

        return 0;
    }

    // takes martha to exit
    public void toExit(FleeState state) {
        List<Node> path= Path.shortestPath(state.currentNode(), state.exit());
        path.remove(0);
        for (Node n : path) {
            state.moveTo(n);
        }
    }
}
